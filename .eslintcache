[{"/Users/irosen419/Desktop/Practice Projects/country-quiz/src/reportWebVitals.js":"1","/Users/irosen419/Desktop/Practice Projects/country-quiz/src/App.js":"2","/Users/irosen419/Desktop/Practice Projects/country-quiz/src/data.js":"3","/Users/irosen419/Desktop/Practice Projects/country-quiz/src/Containers/QuizCard.js":"4","/Users/irosen419/Desktop/Practice Projects/country-quiz/src/index.js":"5","/Users/irosen419/Desktop/Practice Projects/country-quiz/src/Containers/CaptalQuestion.js":"6","/Users/irosen419/Desktop/Practice Projects/country-quiz/src/Containers/FlagQuestion.js":"7","/Users/irosen419/Desktop/Practice Projects/country-quiz/src/Components/AnserwChoice.js":"8"},{"size":362,"mtime":1606336773423,"results":"9","hashOfConfig":"10"},{"size":945,"mtime":1606451163287,"results":"11","hashOfConfig":"10"},{"size":267,"mtime":1606341269882,"results":"12","hashOfConfig":"10"},{"size":1938,"mtime":1606452017521,"results":"13","hashOfConfig":"10"},{"size":500,"mtime":1606336773422,"results":"14","hashOfConfig":"10"},{"size":1687,"mtime":1606452652113,"results":"15","hashOfConfig":"10"},{"size":918,"mtime":1606442365815,"results":"16","hashOfConfig":"10"},{"size":132,"mtime":1606442822289,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ykyo2z",{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/irosen419/Desktop/Practice Projects/country-quiz/src/reportWebVitals.js",[],"/Users/irosen419/Desktop/Practice Projects/country-quiz/src/App.js",["35"],"import { useState, useEffect } from 'react'\nimport QuizCard from './Containers/QuizCard'\n\nfunction App() {\n  const [start, setStart] = useState(false)\n  const [countryArray, setCountryArray] = useState([])\n\n  //retrieves all countries from the API\n  //country data is formated as an Object, only taking name, capital and flag image\n  //sets state with countries, using Hooks\n  useEffect(async () => {\n    const response = await fetch('https://restcountries.eu/rest/v2/all')\n    const data = await response.json()\n    const countries = data.map(country => ({ \"name\": country.name, \"capital\": country.capital, \"flag\": country.flag }))\n    setCountryArray(countries)\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <h1>Country Quiz</h1>\n\n\n      {start && countryArray.length > 0 ? <QuizCard countries={countryArray} /> : null}\n      {start ? null : <button onClick={() => setStart(true)}>Start</button>}\n    </div>\n  );\n}\n\nexport default App;\n","/Users/irosen419/Desktop/Practice Projects/country-quiz/src/data.js",[],"/Users/irosen419/Desktop/Practice Projects/country-quiz/src/Containers/QuizCard.js",["36","37","38","39"],"/Users/irosen419/Desktop/Practice Projects/country-quiz/src/index.js",[],"/Users/irosen419/Desktop/Practice Projects/country-quiz/src/Containers/CaptalQuestion.js",["40"],"/Users/irosen419/Desktop/Practice Projects/country-quiz/src/Containers/FlagQuestion.js",["41","42"],"/Users/irosen419/Desktop/Practice Projects/country-quiz/src/Components/AnserwChoice.js",[],{"ruleId":"43","severity":1,"message":"44","line":11,"column":13,"nodeType":"45","endLine":16,"endColumn":4},{"ruleId":"46","severity":1,"message":"47","line":10,"column":12,"nodeType":"48","messageId":"49","endLine":10,"endColumn":17},{"ruleId":"46","severity":1,"message":"50","line":10,"column":19,"nodeType":"48","messageId":"49","endLine":10,"endColumn":27},{"ruleId":"43","severity":1,"message":"51","line":18,"column":8,"nodeType":"52","endLine":18,"endColumn":10,"suggestions":"53"},{"ruleId":"43","severity":1,"message":"51","line":22,"column":8,"nodeType":"52","endLine":22,"endColumn":24,"suggestions":"54"},{"ruleId":"43","severity":1,"message":"55","line":15,"column":8,"nodeType":"52","endLine":15,"endColumn":10,"suggestions":"56"},{"ruleId":"46","severity":1,"message":"57","line":2,"column":8,"nodeType":"48","messageId":"49","endLine":2,"endColumn":20},{"ruleId":"46","severity":1,"message":"58","line":6,"column":12,"nodeType":"48","messageId":"49","endLine":6,"endColumn":18},"react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","no-unused-vars","'score' is assigned a value but never used.","Identifier","unusedVar","'setScore' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getCountries'. Either include it or remove the dependency array.","ArrayExpression",["59"],["60"],"React Hook useEffect has a missing dependency: 'countries'. Either include it or remove the dependency array. If 'setAnswer' needs the current value of 'countries', you can also switch to useReducer instead of useState and read 'countries' in the reducer.",["61"],"'AnswerChoice' is defined but never used.","'answer' is assigned a value but never used.",{"desc":"62","fix":"63"},{"desc":"64","fix":"65"},{"desc":"66","fix":"67"},"Update the dependencies array to be: [getCountries]",{"range":"68","text":"69"},"Update the dependencies array to be: [getCountries, numberAnswered]",{"range":"70","text":"71"},"Update the dependencies array to be: [countries]",{"range":"72","text":"73"},[509,511],"[getCountries]",[566,582],"[getCountries, numberAnswered]",[434,436],"[countries]"]